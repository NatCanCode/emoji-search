{"version":3,"sources":["components/Line.js","components/Search.js","App.js","index.js"],"names":["Line","props","className","title","onClick","navigator","clipboard","writeText","symbol","Search","value","inputValue","onChange","handleChange","type","placeholder","App","event","setState","target","clickToFilter","kind","emojiList","emojis","filteredEmojis","filter","elem","keywords","includes","state","console","log","this","map","index","toLowerCase","indexOf","React","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"gNAeeA,EAZF,SAACC,GACZ,OACE,oBAAIC,UAAU,OAAd,SACE,qBAAIC,MAAM,gBAAgBC,QAAS,kBAAMC,UAAUC,UAAUC,UAAUN,EAAMO,SAA7E,UACE,4BAAIP,EAAME,QACV,4BAAIF,EAAMO,eCOHC,EAZA,SAACR,GACd,OACE,qBAAKC,UAAU,SAAf,SACI,uBACAQ,MAAOT,EAAMU,WACbC,SAAUX,EAAMY,aAAcC,KAAK,OACnCC,YAAY,2B,OCyGLC,E,kDA1Gb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAKRY,aAAe,SAACI,GACd,EAAKC,SAAS,CAACP,WAAYM,EAAME,OAAOT,SAPvB,EAqBnBU,cAAgB,SAACC,GAOf,IAAMC,EAAS,YAAOC,GAClBC,EAAiB,GACrB,OAAOH,GACL,IAAK,UAGHG,EAAiBF,EAAUG,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAASC,SAAS,aAEjE,EAAKV,SAAS,CAACK,OAAQC,IACvB,MACF,IAAK,SACHA,EAAiBF,EAAUG,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAASC,SAAS,aACjE,EAAKV,SAAS,CAACK,OAAQC,IACvB,MACF,IAAK,SAEHA,EAAiBF,EAAUG,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAASC,SAAS,aACjE,EAAKV,SAAS,CAACK,OAAQC,IACvB,MACF,IAAK,OACHA,EAAiBF,EAAUG,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAASC,SAAS,WACjE,EAAKV,SAAS,CAACK,OAAQC,IACvB,MACF,IAAK,QAEHA,EAAiBF,EAAUG,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAASC,SAAS,YACjE,EAAKV,SAAS,CAACK,OAAQC,IACvB,MACF,QACE,EAAKN,SAAS,CAACK,OAAQA,MAtD3B,EAAKM,MAAQ,CAACN,OAAQA,EAAQZ,WAAY,IAHzB,E,sDAWnB,WACEmB,QAAQC,IAAIC,KAAKH,MAAMlB,c,oBAiDzB,WAAU,IAAD,OAEP,OACE,qCACE,iDACA,cAAC,EAAD,CACAA,WAAYqB,KAAKH,MAAMlB,WACvBE,aAAcmB,KAAKnB,eAEnB,sBAAKX,UAAU,eAAf,UACE,wBAAQE,QAAS,kBAAM,EAAKgB,cAAc,QAA1C,iBACA,wBAAQhB,QAAS,kBAAM,EAAKgB,cAAc,YAA1C,qBACA,wBAAQhB,QAAS,kBAAM,EAAKgB,cAAc,SAA1C,qBAEF,sBAAKlB,UAAU,eAAf,UACE,wBAAQE,QAAS,kBAAM,EAAKgB,cAAc,WAA1C,oBACA,wBAAQhB,QAAS,kBAAM,EAAKgB,cAAc,WAA1C,oBACA,wBAAQhB,QAAS,kBAAM,EAAKgB,cAAc,UAA1C,sBAEF,+DACA,qBAAKlB,UAAU,YAAf,SACG8B,KAAKH,MAAMN,OAAOU,KAAI,SAACP,EAAMQ,GAE5B,OAGqD,IAFnDR,EAAKC,SACJQ,cACAC,QAAQ,EAAKP,MAAMlB,WAAWwB,iBAGoB,IAFnDT,EAAKvB,MACJgC,cACAC,QAAQ,EAAKP,MAAMlB,WAAWwB,eAE7B,8BACE,cAAC,EAAD,CAAMhC,MAAOuB,EAAKvB,MAAOK,OAAQkB,EAAKlB,UAD9B0B,EAAQR,EAAKvB,OAKpB,UAGX,wBAAQD,UAAU,YAAlB,uD,GArGUmC,IAAMC,WCFlBC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFJ,I","file":"static/js/main.55cf0280.chunk.js","sourcesContent":["import React from 'react'\nimport '../App.css'\n\nconst Line = (props) => {\n  return (\n    <ul className=\"Line\">\n      <li title=\"click to copy\" onClick={() => navigator.clipboard.writeText(props.symbol)}>\n        <p>{props.title}</p>\n        <p>{props.symbol}</p>\n      </li>\n    </ul>\n  )\n  \n}\n\nexport default Line\n","import React from 'react'\nimport '../App.css'\n\nconst Search = (props) => {\n  return (\n    <div className=\"Search\">\n        <input\n        value={props.inputValue}\n        onChange={props.handleChange} type=\"text\" \n        placeholder=\"üîé Search\"/>\n        {/* <i className=\"fa fa-search\"></i> */}\n    </div>\n    )\n}\n\nexport default Search\n\n// create a search bar component\n// add an input\n// create handleChange function */","import \"./App.css\"\nimport Line from \"./components/Line\"\nimport Search from \"./components/Search\"\nimport emojis from \"./emojis.json\"\nimport React, { useDebugValue } from \"react\"\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    // declare state containing emojis\n    this.state = {emojis: emojis, inputValue: \"\"}\n  }\n  // get input event and update the state\n  handleChange = (event) => {\n    this.setState({inputValue: event.target.value})\n    // console.log(event.target.value)\n  }\n\n  componentDidUpdate() {\n    console.log(this.state.inputValue)\n  }\n\n  // filterInput = (value) => {\n  //   let filteredValue = [...emojis]\n  //   filteredValue = filteredInput.filter(elem => elem.keywords.includes(value))\n  //   this.setState({emojis: filteredValue})\n  // }\n\n  clickToFilter = (kind) => {\n    // display button value in console\n    // console.log(\"button value: \", kind)\n    // change emoji state to get animal emojis only\n    // filter() includes() indexOf()\n    // 1. copy state value in a variable\n    // let newEmojis = [...this.state.emojis]\n    const emojiList = [...emojis]\n    let filteredEmojis = []\n    switch(kind) {\n      case \"Animals\":\n        // let newEmojis = [...this.state.emojis]\n        // 2. change variable value\n        filteredEmojis = emojiList.filter(elem => elem.keywords.includes(\"animal\"))\n        // 3. update state value using setState\n        this.setState({emojis: filteredEmojis}) \n        break\n      case \"Nature\":\n        filteredEmojis = emojiList.filter(elem => elem.keywords.includes(\"nature\" || \"plant\"))\n        this.setState({emojis: filteredEmojis})\n        break\n      case \"Humans\": \n        // let newEmojis = [...this.state.emojis]\n        filteredEmojis = emojiList.filter(elem => elem.keywords.includes(\"people\" || \"person\" || \"smiley\"))\n        this.setState({emojis: filteredEmojis}) \n        break \n      case \"Food\":\n        filteredEmojis = emojiList.filter(elem => elem.keywords.includes(\"food\" || \"drink\"))\n        this.setState({emojis: filteredEmojis})\n        break\n      case \"Sport\":\n        // let newEmojis = [...this.state.emojis]\n        filteredEmojis = emojiList.filter(elem => elem.keywords.includes(\"sport\"))\n        this.setState({emojis: filteredEmojis}) \n        break \n      default: \n        this.setState({emojis: emojis})\n    }\n  }\n\n  render() {\n    // console.log(this.state.emojis)\n    return (\n      <>\n        <h1>My Emoji Search</h1>\n        <Search \n        inputValue={this.state.inputValue} \n        handleChange={this.handleChange}/>\n      {/* arrow fct to lauch only on click */}\n        <div className=\"buttons btn1\">\n          <button onClick={() => this.clickToFilter(\"All\")}>All</button>\n          <button onClick={() => this.clickToFilter(\"Animals\")}>Animals</button>\n          <button onClick={() => this.clickToFilter(\"Food\")}>Food</button>\n        </div>\n        <div className=\"buttons btn2\">\n          <button onClick={() => this.clickToFilter(\"Humans\")}>Humans</button>\n          <button onClick={() => this.clickToFilter(\"Nature\")}>Nature</button>\n          <button onClick={() => this.clickToFilter(\"Sport\")}>Sport</button>\n        </div>\n        <h3>Click on an emoji to copy it!</h3> \n        <div className=\"container\">\n          {this.state.emojis.map((elem, index) => {\n            //your filtered condition => si le keywords n'est pas dans l'array, il renvoie -1\n            if (\n              elem.keywords\n              .toLowerCase()\n              .indexOf(this.state.inputValue.toLowerCase()) !== -1 ||\n              elem.title\n              .toLowerCase()\n              .indexOf(this.state.inputValue.toLowerCase()) !== -1) {\n              return (\n                <div key={index + elem.title}>\n                  <Line title={elem.title} symbol={elem.symbol}/>\n                </div>\n              )\n            }\n            return null\n          })}\n        </div>\n        <footer className=\"copyright\">¬© 2021 - Made with ü§ç</footer>\n      </>\n    )\n  }\n}\n\nexport default App;\n\n\n// √âtape 1 : dans App.js , afficher une ligne avec le titre de l'emoji et son symbole (dans le fichier json √ßa correspond √† ''title' et 'symbol')\n// √âtape 2 : utiliser le composant Line.js pour afficher une ligne\n// √âtape 3 : depuis App.js afficher toutes les lignes\n// √âtape 4 : impl√©menter le composant Line pour qu'on puisse copier le symbole en cliquant sur la ligne\n// navigator.clipboard.writeText(/* ici ce qu'on veut copier */)","import { StrictMode } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n)\n"],"sourceRoot":""}